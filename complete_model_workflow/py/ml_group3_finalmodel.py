# -*- coding: utf-8 -*-
"""ML_Group3_FinalModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZOJ-0suLH_J292W88B5Xq5jN78nwu-AP
"""

from google.colab import drive
import pandas as pd

# Mount Google Drive
drive.mount('/content/drive')

# Path to your file
model_path = '/content/drive/MyDrive/DATA245-Machine-Learning-Group(3)/ML_Project/grid_rf_model.pkl'

import joblib

loaded_model = joblib.load(model_path)

new_row_data = pd.DataFrame([{
    'title': 7050,                # title present (good)
    'location': 1642,             # location filled (good)
    'department': 812,            # department mentioned (good)
    'salary_range': 950,          # salary specified (ok)
    'telecommuting': 0,           # onsite job (normal)
    'has_company_logo': 1,        # logo present (positive)
    'has_questions': 1,           # screening questions present (good)
    'employment_type': 1,         # employment type specified (good)
    'required_experience': 3,     # experience requirement (normal)
    'required_education': 4,      # education requirement (normal)
    'industry': 120,              # clear industry (good)
    'function': 30,               # common function (normal)
    'non_https_links': 1.0,       # has 1 non-https link (warning)
    'id_info_requested': 1.0,     # ID info asked (major warning)
    'avg_days_offer': 40,         # slow offer (good)
    'avg_urgent_terms': 0,        # no urgent terms (good)
    'avg_bait_phrases': 1         # mild baiting (minor risk)
}])


y_pred = loaded_model.predict(new_row_data)
y_proba = loaded_model.predict_proba(new_row_data)

predicted_class = 'Fraudulent' if y_pred[0] == 1 else 'Legitimate'

print(f"Predicted Class: {predicted_class}")
print(f"Predicted Probabilities: Legitimate = {y_proba[0][0]:.4f}, Scam = {y_proba[0][1]:.4f}")

new_row_data = pd.DataFrame([{
    'title': 5020,                # common title ID
    'location': 1200,             # popular city
    'department': 620,            # active department
    'salary_range': 800,          # realistic salary
    'telecommuting': 0,           # mostly on-site
    'has_company_logo': 1,        # company has a logo
    'has_questions': 1,           # screening questions asked
    'employment_type': 1,         # full-time
    'required_experience': 2,     # mid-level experience
    'required_education': 3,      # bachelor's degree
    'industry': 90,               # common industry
    'function': 20,               # standard job function
    'non_https_links': 0.0,       # no suspicious links
    'id_info_requested': 0.0,     # no ID asked
    'avg_days_offer': 14,         # 2 weeks (normal)
    'avg_urgent_terms': 0,        # no urgency
    'avg_bait_phrases': 0         # no bait phrases
}])

y_pred = loaded_model.predict(new_row_data)
y_proba = loaded_model.predict_proba(new_row_data)

predicted_class = 'Fraudulent' if y_pred[0] == 1 else 'Legitimate'

print(f"Predicted Class: {predicted_class}")
print(f"Predicted Probabilities: Legitimate = {y_proba[0][0]:.4f}, Scam = {y_proba[0][1]:.4f}")

new_row_data = pd.DataFrame([{
    'title': 6300,                # generic job title
    'location': 1500,             # mid-range location
    'department': 700,            # common dept
    'salary_range': 1200,         # a bit high, could raise flags
    'telecommuting': 1,           # remote job (sometimes exploited)
    'has_company_logo': 0,        # no logo (slightly suspicious)
    'has_questions': 1,           # has screening questions (legit trait)
    'employment_type': 2,         # part-time (less red flags than contract)
    'required_experience': 1,     # entry-level
    'required_education': 2,      # high school/diploma
    'industry': 100,              # somewhat vague industry
    'function': 25,               # a bit uncommon
    'non_https_links': 1.0,       # contains 1 non-https link
    'id_info_requested': 0.0,     # no ID asked (good)
    'avg_days_offer': 6,          # fast offer (can be legit or sus)
    'avg_urgent_terms': 1,        # 1 urgent term (mild baiting)
    'avg_bait_phrases': 2         # some bait phrases (suspicious)
}])

y_pred = loaded_model.predict(new_row_data)
y_proba = loaded_model.predict_proba(new_row_data)

predicted_class = 'Fraudulent' if y_pred[0] == 1 else 'Legitimate'

print(f"Predicted Class: {predicted_class}")
print(f"Predicted Probabilities: Legitimate = {y_proba[0][0]:.4f}, Scam = {y_proba[0][1]:.4f}")